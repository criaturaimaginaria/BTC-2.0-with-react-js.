{"version":3,"sources":["components/CurrencyRow.jsx","components/BTCmarket.jsx","components/Ethereum.jsx","components/Main.jsx","logo.png","components/Nav.jsx","components/OtherCurrency.jsx","components/Footer.jsx","App.js","index.js"],"names":["CurrencyRow","props","priceAmount","amount","amountChange","onChangeAmount","type","className","value","onChange","BTCmarket","apuUrl","useState","api","setApi","api2","setApi2","Mcap","setMcap","marketapi","a","fetch","response","json","data","number","current_price","data2","image","marketCapital","market_cap","useEffect","toAmount","fromAmount","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","currencyApi","src","alt","e","target","Ethereum","img","setImg","toFixed","Math","trunc","Main","Nav","logo","to","OtherCurrency","cryptoUrl","name","map","element","id","Footer","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4de67fb0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const CurrencyRow = (props) => {\r\n\r\n    // const {currencyOptions, onChangeCurrency} = props\r\n    //  console.log(props.currencyOptions[0 , 0 ])\r\n    const priceAmount = (props.amount)\r\n    const amountChange = (props.onChangeAmount)\r\n\r\n    // console.log(selectedCurr)\r\n    return (\r\n        <div>\r\n        \r\n           <input type=\"number\" className=\"input\" value={priceAmount} onChange={amountChange} />\r\n     \r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencyRow\r\n","import React,{useState, useEffect} from 'react'\r\nimport CurrencyRow from './CurrencyRow'\r\n\r\nconst BTCmarket = () => {\r\n    const apuUrl  = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false' \r\n   \r\n\r\n    const [api, setApi] = useState()\r\n    const[api2, setApi2] = useState()\r\n    const[Mcap, setMcap] = useState()\r\n\r\n    const marketapi = async () =>{\r\n        const response = await fetch(apuUrl)\r\n        const data = await response.json() \r\n\r\n        const number = (data[0].current_price) \r\n        const data2 = (data[0].image)\r\n        const marketCapital = (data[0].market_cap)\r\n\r\n        setApi2(data2)\r\n        setApi(number)\r\n        setMcap(marketCapital)\r\n\r\n    }\r\n\r\n  useEffect(()=>{\r\n        // setInterval(fetchBtcApi, 1000 )   \r\n        marketapi()\r\n\r\n    }, )\r\n\r\n    // ------------------------------------------------------------------------\r\n    \r\n \r\n   \r\n    \r\n    const [exchangeRate, setExchangeRate] = useState()\r\n    const [amount, setAmount] = useState (1)\r\n    const [amountInFromCurrency, setAmountInFromCurrency ] = useState (true)\r\n\r\n    \r\n    \r\n\r\n    let toAmount, fromAmount\r\n    if (amountInFromCurrency) {\r\n        fromAmount = amount\r\n        toAmount = amount * exchangeRate\r\n    } else{\r\n        toAmount = amount\r\n        fromAmount = amount / exchangeRate\r\n    }    \r\n\r\n\r\n    const currencyApi = async () =>{\r\n        const response = await fetch(apuUrl)\r\n        const data = await response.json() \r\n\r\n        setExchangeRate(data[0].current_price)\r\n        // console.log(data.map((price)=> price.current_price))\r\n        // console.log(data.map((price)=> price.symbol))\r\n    }\r\n    \r\n\r\n            \r\n    useEffect(()=>{\r\n        currencyApi()\r\n       \r\n    }, [])\r\n\r\n  \r\n\r\n\r\n\r\n function handleFromAmountChange(e){\r\n    setAmount(e.target.value)\r\n    setAmountInFromCurrency(true)\r\n }\r\n function handleToAmountChange(e){\r\n    setAmount(e.target.value)\r\n    setAmountInFromCurrency(false)\r\n }\r\n \r\n\r\n    \r\n        return (\r\n            <div className=\"bitcoin\">\r\n\r\n                   <h1> Bitcoin </h1>\r\n                   <h1>Current price: {api} USD</h1>\r\n                   \r\n                   <h1> Market cap: {Mcap}</h1>\r\n                   <img src={api2}  alt=\"BTC\" className=\"btc-logo\"/>\r\n\r\n               \r\n            \r\n                   <CurrencyRow \r\n\r\n                onChangeAmount={handleFromAmountChange}\r\n                amount={fromAmount}\r\n                />\r\n                \r\n                <div>=</div>\r\n                \r\n                <CurrencyRow  \r\n    \r\n                onChangeAmount={handleToAmountChange}\r\n                amount={toAmount}\r\n                />\r\n               \r\n            </div>\r\n        )\r\n    }\r\n    export default BTCmarket\r\n","import React, {useState, useEffect} from 'react'\r\nimport CurrencyRow from './CurrencyRow'\r\n\r\n\r\nconst Ethereum = () => {\r\n    const apuUrl  = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false' \r\n    \r\n    const [api, setApi] = useState()\r\n    const[Mcap, setMcap] = useState()\r\n    const[img, setImg] = useState()\r\n\r\n\r\n    const marketapi = async () =>{\r\n        const response = await fetch(apuUrl)\r\n        const data = await response.json() \r\n        const number = (data[1].current_price) \r\n        const marketCapital = (data[1].market_cap)\r\n        const img = (data[1].image)\r\n        \r\n        setApi(number)\r\n        setMcap(marketCapital)\r\n        setImg(img)\r\n    }\r\n\r\n  useEffect(()=>{\r\n        // setInterval(fetchBtcApi, 1000 )   \r\n        marketapi()\r\n\r\n    }, )\r\n\r\n\r\n        // ------------------------------------------------------------------------\r\n    \r\n \r\n   \r\n    \r\n        const [exchangeRate, setExchangeRate] = useState()\r\n        const [amount, setAmount] = useState (1)\r\n        const [amountInFromCurrency, setAmountInFromCurrency ] = useState (true)\r\n    \r\n        \r\n        \r\n    \r\n        let toAmount, fromAmount\r\n        if (amountInFromCurrency) {\r\n            fromAmount = amount\r\n            toAmount = amount * exchangeRate\r\n        } else{\r\n            toAmount = amount\r\n            fromAmount = amount / exchangeRate\r\n        }    \r\n    \r\n    \r\n        const currencyApi = async () =>{\r\n            const response = await fetch(apuUrl)\r\n            const data = await response.json() \r\n    \r\n            setExchangeRate(data[1].current_price.toFixed(0))\r\n            // console.log(data.map((price)=> price.current_price))\r\n            // console.log(data.map((price)=> price.symbol))\r\n        }\r\n        \r\n    \r\n                \r\n        useEffect(()=>{\r\n            currencyApi()\r\n           \r\n        }, [])\r\n    \r\n      \r\n    \r\n    \r\n    \r\n     function handleFromAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setAmountInFromCurrency(true)\r\n     }\r\n     function handleToAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setAmountInFromCurrency(false)\r\n     }\r\n     \r\n    \r\n    return (\r\n        <div className=\"ETH\">\r\n            <h1>Ethereum </h1>\r\n            <h1>Current price: {Math.trunc(api)} USD </h1>\r\n            <h1>Market cap: {Mcap} </h1>\r\n            <img src={img}  alt=\"ETH\" className=\"eth-logo\"/>\r\n\r\n\r\n            <CurrencyRow \r\n\r\n            onChangeAmount={handleFromAmountChange}\r\n            amount={fromAmount}\r\n            />\r\n\r\n            <div>=</div>\r\n\r\n            <CurrencyRow  \r\n\r\n            onChangeAmount={handleToAmountChange}\r\n            amount={toAmount}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ethereum\r\n","import React from 'react'\r\n\r\nconst Main = () => {\r\n\r\n    \r\n    return (\r\n        <div className=\"main\">\r\n            <h1>Main</h1>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","export default __webpack_public_path__ + \"static/media/logo.91508e83.png\";","import React from 'react';\r\nimport logo from '../logo.png';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n\r\n\r\n    return (  \r\n        \r\n        <nav>\r\n             <img src={logo} alt=\"btc nav\" className=\"logo\" />\r\n            \r\n            <ul className=\"nav-links\">\r\n                <Link to='/components/Main'>\r\n                    <li>Main</li>\r\n                </Link>    \r\n                <Link to='/components/BTCmarket'>\r\n                    <li>Bitcoin</li>\r\n                </Link> \r\n                <Link to='/components/Ethereum'>\r\n                    <li>Ethereum</li>\r\n                </Link> \r\n                <Link to='/components/OtherCurrency'>\r\n                    <li>Other Currency</li>\r\n                </Link> \r\n                \r\n            </ul>\r\n            \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React,  {useState, useEffect} from 'react'\r\nimport  CurrencyRow  from './CurrencyRow'\r\n\r\n\r\n\r\nconst OtherCurrency = () => {\r\n    const cryptoUrl  = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false'\r\n\r\n//   -------------------------LIST------------------------------  \r\n    const [api, setApi] = useState([])\r\n\r\n    const marketapi = async () =>{\r\n        const response = await fetch(cryptoUrl)\r\n        const data = await response.json() \r\n\r\n        const number = (data) \r\n        // console.log(number.map((precio)=>precio.current_price))    \r\n        setApi(number)   \r\n    }\r\n\r\n    useEffect(()=>{  \r\n        marketapi()\r\n    },[] )\r\n// ------------------------------------------------------------------------\r\n    \r\n     \r\n        const [exchangeRate, setExchangeRate] = useState()\r\n        const [amount, setAmount] = useState (1)\r\n        const [amountInFromCurrency, setAmountInFromCurrency ] = useState (true)\r\n\r\n        \r\n        \r\n\r\n        let toAmount, fromAmount\r\n        if (amountInFromCurrency) {\r\n            fromAmount = amount\r\n            toAmount = amount * exchangeRate\r\n        } else{\r\n            toAmount = amount\r\n            fromAmount = amount / exchangeRate\r\n        }    \r\n\r\n    \r\n        const currencyApi = async () =>{\r\n            const response = await fetch(cryptoUrl)\r\n            const data = await response.json() \r\n\r\n            setExchangeRate(data[0].current_price)\r\n            // console.log(data.map((price)=> price.current_price))\r\n            // console.log(data.map((price)=> price.symbol))\r\n        }\r\n        \r\n\r\n                \r\n        useEffect(()=>{\r\n            currencyApi()\r\n           \r\n        }, [])\r\n\r\n      \r\n\r\n\r\n\r\n     function handleFromAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setAmountInFromCurrency(true)\r\n     }\r\n     function handleToAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setAmountInFromCurrency(false)\r\n     }\r\n     \r\n    return (\r\n\r\n   \r\n        <div className=\"currencies\">\r\n            <h1>other currencies</h1>\r\n\r\n            <select name=\"currencies\" >\r\n                {api.map(element=>(\r\n                    <option key={element.id} value={element.current_price}  > {element.name}</option>\r\n                ))\r\n                }    \r\n            </select>\r\n            \r\n\r\n                <CurrencyRow \r\n                onChangeAmount={handleFromAmountChange} //x\r\n                amount={fromAmount}\r\n                />\r\n                \r\n                <div>=</div>\r\n                \r\n                <CurrencyRow  \r\n                onChangeAmount={handleToAmountChange} //x\r\n                amount={toAmount}\r\n                />\r\n\r\n                 \r\n\r\n            </div>\r\n\r\n           \r\n              \r\n    )\r\n}\r\n\r\nexport default OtherCurrency\r\n","import React from 'react'\r\n\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n      \r\n            <footer >\r\n                footer  @Holagmail.com\r\n\r\n            </footer>    \r\n \r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import './App.css';\nimport BTCmarket from './components/BTCmarket';\nimport Ethereum from './components/Ethereum';\n// import FetchBtc from './components/FetchBtc';\n// import FetchBtc3 from './components/fetchBtc3';\nimport Main from './components/Main';\nimport Nav from './components/Nav';\nimport OtherCurrency from './components/OtherCurrency'; \nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Footer from './components/Footer';\n\n\n \nfunction App() {\n  return (\n\n    <Router>\n        <div className=\"App\">\n          <Nav />    \n              \n              <Switch  className=\"swit\">\n                <Route path=\"/\" exact component={Main} />\n                <Route path=\"/components/Main\"  component={Main} />\n                <Route path=\"/components/BTCmarket\"  component={BTCmarket} />\n                <Route path=\"/components/Ethereum\"  component={Ethereum} />\n                <Route path=\"/components/OtherCurrency\"  component={OtherCurrency} />\n              </Switch>     \n\n          <Footer />\n\n          {/* <FetchBtc3 /> */}\n          {/* <FetchBtc /> */}\n         </div>\n\n    </Router>\n       \n      \n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}